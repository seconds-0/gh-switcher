# gh-switcher Always Rules (AI Engineer Essentials)
---
alwaysApply: true
---

These rules apply to every AI-assisted or human change in this repository. They
encode the non-negotiable standards for code, tests, documentation, and
processes. Follow them before, during, and after work. 

## 1. Project at a Glance
* **Name**: gh-switcher (`ghs`)
* **Mission**: Lightning-fast, scriptable GitHub *account switcher* for
  developers with multiple GitHub identities.
* **Scope**: GitHub-specific authentication context switching only – *no*
  generic git profile, SSH-config, or secret management.
* **Philosophy**: CLI-first · Simple over complex · Automation-friendly ·
  Project-aware · Resist scope-creep.

## 2. Tech & Runtime
* **Language**: Bash (POSIX-compatible where feasible).
* **Mandatory deps**: GitHub CLI (`gh`), Git, standard Unix tools (`printf`,
  `grep`, `sed`, `base64`, …).
* **Platforms**: macOS, Linux, WSL. 1st-class shells: Zsh & Bash; Fish (best-
  effort).
* **Entry point**: `gh-switcher.sh` (invoked as `ghs`).

## 3. Core Usage Patterns
```bash
# Smart dashboard / help
ghs           # or `ghs help`

# List numbered users
ghs users

# Switch current session & repo to user #2
ghs switch 2

# Persistently assign user #1 to this git project
ghs assign 1
```
* Always add/extend `--help` output when introducing new flags or commands.

## 4. Configuration Files
* `~/.gh-project-accounts` – project ↔︎ user mapping (colon-separated).
* `~/.gh-users`            – numbered user list.
* `~/.gh-user-profiles`    – reserved for future enhanced data.
* **Rule**: Never write outside the user's home; create timestamped backups
  *before* modifying any config file.

## 5. Coding Standards
* Quote every variable: `"$var"` – *never* bare expansions.
* Prefer `[[ ]]` for conditionals; supply defaults `${VAR:-fallback}`.
* Exit early with meaningful status codes; don't rely on implicit `set -e`.
* Name helpers with action verbs (`load_users`, `save_mapping`).
* Emit feedback icons:
  * ✅ success
  * ⚠️ warning
  * ❌ error
  * 💡 tip

## 6. Error-Handling Template
```bash
some_action() {
    local arg="$1"
    if [[ -z "$arg" ]]; then
        printf '❌ Missing argument\n' >&2
        return 1
    fi
    # …logic…
    printf '✅ Done\n'
}
```

## 7. Testing & CI - ZERO TOLERANCE POLICY
* **Primary framework**: bats-core ≥ 1.10 (unit & integration).
* Vitest only with `testing-vitest` label *and* maintainer approval.
* **Directory layout**
  * `tests/unit/`          – ≤200 LoC, fast specs.
  * `tests/integration/`   – end-to-end CLI workflows; tag slow ones `@slow`.
* Each BATS file loads `helpers/test_helper` then `setup_test_environment` /
  `cleanup_test_environment`; run exclusively in `$TEST_HOME`.

### **MANDATORY Test Quality Standards**
* **100% Test Execution**: Every detected test MUST execute. "Not run" tests indicate broken infrastructure and block all progress.
* **Zero Failures**: All tests must pass. No exceptions, no "acceptable failure rates".
* **Legitimate Skips Only**: Only skip tests for missing external dependencies (e.g., `gpg` binary), never for internal logic failures.

### **Test Debugging Methodology (When Tests Fail)**
1. **Research First**: Use documentation (Context7, official docs) to understand tool behavior before guessing.
2. **Systematic Isolation**: Simplify failing test to minimal case, rebuild incrementally.
3. **Exact Output Matching**: Use BATS debug output (`echo "Debug: $output" >&3`) to see actual vs expected.
4. **Fix Root Cause**: Never work around test failures; fix the underlying issue completely.

### **Verification Sequence (must pass locally & in CI)**
1. `npm run lint` → `shellcheck -x -e SC1091,SC2155 gh-switcher.sh`.
2. `npm test`     → run *all* `tests/**/*.bats` files. MUST show "X tests, 0 failures, Y skipped" with X = total detected tests.
3. `npm run build` (placeholder) – ensure zero fatal errors.

### **Test Infrastructure Standards**
* **Assertions**: Must match exact actual output, not assumptions.
* **Helper Functions**: All custom assertions must be tested and documented.
* **Environment Isolation**: Tests must not interfere with each other or host system.
* **Debugging Support**: Every test file must support verbose debugging output.

## 8. Commit & PR Hygiene
* Branch from `main`; squash-merge back.
* Commit message format:
  ```
  type: short description

  Longer explanation (why not what).
  Fixes #issue
  ```
  Types: *feat | fix | docs | refactor | test | chore*.
* Always state *why* the change is needed.
* **Pre-commit gate** – Before *every* commit, contributors **must** run:
  1. `npm run lint`
  2. `npm test`
  Any failure blocks the commit until resolved.
* **Self-review mandate** – Perform a critical self review of all diffs and test results **before** opening a PR or marking a feature "complete". Confirm:
  * All new/changed lines follow Coding Standards & Error-Handling template.
  * Appropriate tests exist (unit + ≥1 higher layer) and pass.
  * Documentation updated where behaviour changes.

## 9. Documentation & Release
* **Feature / bug-fix plans** live under `Documentation/Plans/` using the
  provided template before coding begins.
* **User docs** go in `docs/`; update relevant sections when behaviour changes.
* Bump version in `package.json` when public CLI behaviour changes; tag release
  candidates with `vX.Y.Z`.

## 10. Security & Secrets
* Never commit PATs, tokens, or private keys. Use `gh auth login` for runtime
  auth.
* Do not read or write SSH config files – rely on Git's user config only.
* Sanitize user input before echo/printf; avoid command injection.

## 11. Performance Target
* End-to-end CLI commands should finish in **<100 ms** on a typical
  `ubuntu-latest` runner (cold start). Optimise for minimal external calls.

## 12. AI-Agent Behaviour
1. **Ownership** – you act as senior engineer; take responsibility for code.
2. **No Shortcuts Policy** – Never suggest "good enough" solutions. If tests are broken, fix them completely.
3. **Clarity Protocol** – if unclear, *state uncertainty & ask*; no guessing.
4. **Documentation-first** – consult official docs before using externals.
5. **Quality Gates** – *never* mark work done until lint + tests + build pass.
6. **Systematic Debugging** – When problems arise: research → isolate → fix root cause. No random guessing.
7. **Tool Calls** – favour parallel read/search; never leak internal tool names
   to the user.
8. **Memory** – update/delete memories on contradiction; cite IDs inline.
9. **Task Management** – use `todo_write` for multi-step or dependent work.

## 13. Common Anti-Patterns to Avoid
* Interactive main-menu TUIs.
* Hard-coded absolute paths or unscoped temp files.
* Direct SSH-config manipulation.
* Over-engineering; keep Bash functions concise (<50 LoC preferred).

## 14. Handy References
* `gh auth status` – show current authenticated GitHub user.
* `git config user.name` – verify commit identity.
* `ghs help` – authoritative CLI help.

# End of always-rules (≈300 lines, keep ≤400)



