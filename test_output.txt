
> gh-switcher@1.0.0 test
> bats -r tests

1..164
ok 1 ghs guard shows usage and help
ok 2 ghs guard test validates successfully with correct setup
ok 3 ghs guard test detects account mismatch
ok 4 ghs guard test handles missing project assignment
ok 5 ghs guard test detects incomplete git config
ok 6 ghs guard test handles unauthenticated GitHub CLI
ok 7 ghs guard status shows installation state
ok 8 guard commands require git repository
ok 9 guard handles corrupted git repository
ok 10 guard handles malformed project configuration
ok 11 guard handles missing project configuration file
ok 12 guard handles gh API failures gracefully
ok 13 guard handles git config with special characters
ok 14 ghs guard install creates working hook
ok 15 ghs guard install handles already installed hooks
ok 16 ghs guard install backs up existing hooks
ok 17 ghs guard uninstall removes hooks
ok 18 ghs guard uninstall handles no hooks to remove
ok 19 guard hook validates successfully with correct setup
ok 20 guard hook blocks commit with account mismatch
ok 21 guard hook respects skip flag
ok 22 guard hook executes within performance requirements
ok 23 guard hook actually prevents commit with wrong account
ok 24 guard hook allows commit with correct account
ok 25 guard hook respects GHS_SKIP_HOOK environment variable
ok 26 guard hook works after ghs is moved or PATH changes
ok 27 complete workflow with multiple hosts
ok 28 v3 to v4 migration on edit
ok 29 SSH testing respects host configuration
not ok 30 project assignment with enterprise users
# (from function `assert_success' in file tests/integration/../helpers/test_helper.bash, line 208,
#  in test file tests/integration/test_multihost_workflow.bats, line 153)
#   `assert_success' failed
# hint: Using 'master' as the name for the initial branch. This default branch name
# hint: is subject to change. To configure the initial branch name to use in all
# hint: of your new repositories, which will suppress this warning, call:
# hint:
# hint: 	git config --global init.defaultBranch <name>
# hint:
# hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
# hint: 'development'. The just-created branch can be renamed via this command:
# hint:
# hint: 	git branch -m <name>
# Initialized empty Git repository in /private/var/folders/dy/f2lqfzj52999v0ftcry36ksm0000gn/T/gh-switcher-test-88925/project/.git/
# Expected command to succeed (exit code 0), got 1
# Output: ℹ️  Note: This profile is for host: github.enterprise.com
#    Ensure you're authenticated: gh auth status --hostname github.enterprise.com
# ❌ Git config incomplete!
#    Name:  <not set>
#    Email: <not set>
#
#    Fix with: ghs switch enterprise
ok 31 different default emails for different hosts
ok 32 host validation prevents common mistakes
ok 33 switching between users on different hosts
ok 34 full workflow: add, show, edit, switch
ok 35 pre-flight check in switch command
ok 36 status command shows profile warnings
ok 37 status shows missing profile warning
ok 38 show command detects git config mismatch for active user
ok 39 edit suggests reapply for active user
ok 40 dispatcher handles new commands
ok 41 help shows new commands
ok 42 multiple SSH key suggestions prioritize username matches
ok 43 email typo detection skips bot accounts
ok 44 ghs assign stores user for project and auto-selects
ok 45 ghs switch changes git config to selected user
ok 46 add_user creates user without SSH key
ok 47 add_user creates user with SSH key
ok 48 add_user continues with warning when SSH key missing
ok 49 add_user fixes SSH key permissions
ok 50 add_user continues with warning for invalid SSH key format
ok 51 add_user rejects invalid username format
ok 52 add_user handles duplicate usernames
ok 53 add_user shows usage when no username provided
ok 54 add_user rejects unknown options
ok 55 remove_user removes user by name
ok 56 remove_user removes user by number
ok 57 remove_user handles non-existent user
ok 58 remove_user handles invalid user ID when no users exist
ok 59 remove_user shows usage when no user provided
ok 60 list_users shows empty state
ok 61 list_users shows users with numbers
ok 62 list_users shows SSH status for working keys
ok 63 get_user_by_id returns correct username
ok 64 get_user_by_id handles invalid ID
ok 65 get_user_by_id handles non-existent ID when no users
ok 66 add_user creates profile with git config
ok 67 validate_ssh_key accepts valid ed25519 key
ok 68 validate_ssh_key accepts valid RSA key
ok 69 validate_ssh_key rejects missing file
ok 70 validate_ssh_key rejects invalid format
ok 71 validate_ssh_key fixes permissions
ok 72 validate_ssh_key warns about wrong permissions without fixing
ok 73 validate_ssh_key handles empty path
ok 74 validate_ssh_key prevents directory traversal
ok 75 apply_ssh_config sets git SSH command
ok 76 apply_ssh_config removes SSH config when empty path
ok 77 apply_ssh_config requires git repository for local scope
ok 78 apply_ssh_config works globally outside repository
ok 79 apply_ssh_config handles invalid scope
ok 80 create_user_profile stores SSH key path
ok 81 create_user_profile works without SSH key
ok 82 apply_user_profile applies SSH configuration
ok 83 apply_user_profile handles missing SSH key gracefully
ok 84 SSH key permissions are fixed automatically during profile creation
ok 85 SSH functions handle tilde in paths
ok 86 validate_host accepts valid formats
ok 87 validate_host rejects invalid formats
ok 88 validate_host rejects empty host
ok 89 validate_host rejects overly long host
ok 90 profile_get handles v3 format with default host
ok 91 profile_get handles v4 format with custom host
ok 92 profile_create creates v4 format with host
ok 93 profile_create defaults to github.com when host not specified
ok 94 profile_create generates correct default email for enterprise
ok 95 profile_create generates correct default email for github.com
ok 96 cmd_add accepts --host parameter
ok 97 cmd_add validates host format
ok 98 cmd_add shows host when not github.com
ok 99 cmd_edit can update host
ok 100 cmd_show displays host for non-github.com
ok 101 cmd_show doesn't display host for github.com
ok 102 cmd_users shows host for non-github.com
ok 103 cmd_switch shows host info for enterprise
ok 104 test_ssh_auth uses custom host
ok 105 cmd_test_ssh shows host for enterprise users
ok 106 v3 profiles continue to work after v4 implementation
ok 107 mixed v3 and v4 profiles coexist
not ok 108 guard test shows host info for enterprise assignment
# (from function `assert_output_contains' in file tests/unit/../helpers/test_helper.bash, line 189,
#  in test file tests/unit/test_multihost.bats, line 323)
#   `assert_output_contains "Expected host: github.enterprise.com"' failed
# Expected output to contain: Expected host: github.enterprise.com
# Actual output: ⚠️  GitHub CLI not authenticated
#    Run: gh auth login
not ok 109 guard test shows correct auth command for enterprise
# (from function `assert_output_contains' in file tests/unit/../helpers/test_helper.bash, line 189,
#  in test file tests/unit/test_multihost.bats, line 355)
#   `assert_output_contains "gh auth login --hostname github.enterprise.com"' failed
# Expected output to contain: gh auth login --hostname github.enterprise.com
# Actual output: ⚠️  GitHub CLI not authenticated
#    Run: gh auth login
# Duration: 256ms
not ok 110 ghs users completes within reasonable time
# (in test file tests/unit/test_performance.bats, line 41)
#   `[[ "$duration" -lt 150 ]]' failed
# Duration: 100ms
not ok 111 ghs switch completes within 100ms
# (in test file tests/unit/test_performance.bats, line 52)
#   `[[ "$duration" -lt 100 ]]' failed
# Duration: 66ms
ok 112 ghs add completes within 100ms
# Duration: 28ms
ok 113 ghs status completes within 100ms
# Duration: 59ms
ok 114 ghs guard test completes within reasonable time
ok 115 write_profile_entry creates valid v4 profile format
ok 116 write_profile_entry creates valid v4 profile with SSH key
ok 117 profile_create stores user data correctly
ok 118 profile_get retrieves v3 format correctly
ok 119 profile_get handles missing SSH key
ok 120 profile_get handles missing profile gracefully
ok 121 profile_get only supports v3 format
ok 122 multiple profiles can coexist
ok 123 profile_create replaces existing profile
ok 124 profile_remove deletes user profile
ok 125 ghs show displays profile information
ok 126 ghs show works with user ID
ok 127 ghs show detects missing SSH key
ok 128 ghs show finds alternative SSH keys
ok 129 ghs show detects permission issues
ok 130 ghs show detects email typo
ok 131 ghs show handles missing profile
ok 132 ghs show handles non-existent user
ok 133 ghs edit updates email
ok 134 ghs edit updates name
ok 135 ghs edit removes SSH key with none
ok 136 ghs edit expands tilde in paths
ok 137 ghs edit rejects GPG options
ok 138 ghs edit with no changes shows current
ok 139 ghs edit validates email format
ok 140 ghs edit validates SSH key exists
ok 141 ghs edit creates profile if missing
ok 142 ghs edit handles multiple changes
# Duration: 119ms
ok 143 ghs show completes within reasonable time
# Duration: 256ms
ok 144 ghs edit completes within reasonable time
ok 145 find_ssh_key_alternatives finds keys for user
ok 146 profile_has_issues detects SSH key problems
ok 147 profile_has_issues detects email typos
ok 148 profile_has_issues returns 1 for clean profile
ok 149 cmd_edit_usage shows complete help
ok 150 profile_get_field extracts fields correctly
ok 151 test_ssh_auth handles permission denied
ok 152 test_ssh_auth handles network issues
ok 153 test_ssh_auth handles successful authentication
ok 154 cmd_test_ssh shows error when no user specified and no current user
ok 155 cmd_test_ssh tests current user when no user specified
ok 156 cmd_test_ssh shows error for non-existent user
ok 157 cmd_test_ssh shows info for user with no SSH key
ok 158 cmd_test_ssh shows error for missing SSH key file
ok 159 cmd_test_ssh quiet mode returns only exit codes
ok 160 cmd_test_ssh shows success message for working key
ok 161 cmd_test_ssh shows auth failure message
ok 162 cmd_test_ssh shows network issue message
ok 163 cmd_add tests SSH key when provided
ok 164 SSH testing integration is working
