name: CI

on:
  push:
    branches: [ "main", "feat/**", "fix/**", "chore/**" ]
  pull_request:

jobs:
  build-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    defaults:
      run:
        shell: bash

    steps:
      # Configure git to use LF on Windows
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
          
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node (for npm lint/test/build scripts)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Install system deps: ShellCheck ≥1.0 & BATS ≥1.10
      - name: Install ShellCheck & BATS (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y shellcheck zsh fish dash
          # Install bats-core from official Ubuntu repos (available in 22.04+)
          sudo apt-get install -y bats || {
            # Fallback: install from GitHub releases
            echo "Official bats package not available, installing from GitHub releases..."
            curl -sSL https://github.com/bats-core/bats-core/archive/v1.11.0.tar.gz | tar -xzC /tmp
            sudo /tmp/bats-core-1.11.0/install.sh /usr/local
          }

      - name: Install ShellCheck & BATS (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install shellcheck bats-core fish
          # Dash is not in Homebrew core, but we can test with /bin/sh which is similar
          # zsh is pre-installed on macOS but ensure it's available
          which zsh || brew install zsh

      - name: Install ShellCheck & BATS (Windows)
        if: runner.os == 'Windows'
        run: |
          # Create directories if they don't exist
          mkdir -p /usr/local/bin || exit 1
          
          # ShellCheck for Windows with proper extraction
          echo "Installing ShellCheck..."
          curl -L --fail https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.zip -o shellcheck.zip || exit 1
          unzip -o shellcheck.zip || exit 1
          
          # Find and move shellcheck.exe to PATH (handle subdirectory structure)
          find . -name "shellcheck.exe" -type f -exec cp {} /usr/local/bin/shellcheck.exe \; || exit 1
          chmod +x /usr/local/bin/shellcheck.exe || exit 1
          
          # Verify ShellCheck installation
          /usr/local/bin/shellcheck.exe --version || exit 1
          
          # BATS for Windows (Git Bash has bash)
          echo "Installing BATS..."
          git clone --depth 1 https://github.com/bats-core/bats-core.git || exit 1
          (cd bats-core && ./install.sh /usr/local) || exit 1
          
          # Verify BATS installation
          /usr/local/bin/bats --version || exit 1
          
          # Add to PATH for npm scripts
          echo "/usr/local/bin" >> $GITHUB_PATH
          export PATH="/usr/local/bin:$PATH"
          
          # Debug: Show what's installed
          echo "Installed tools:"
          ls -la /usr/local/bin/ || true
          which shellcheck || echo "shellcheck not in PATH"
          which bats || echo "bats not in PATH"

      # Install npm dependencies (none yet, but future-proof)
      - name: Install npm dependencies
        run: npm install --ignore-scripts --no-audit --no-fund

      # Run repository verification sequence (lint → test → build)
      - name: Run lint → test → build
        run: |
          # Ensure PATH includes our installations
          export PATH="/usr/local/bin:$PATH"
          
          # Set OSTYPE for Windows if not already set
          if [[ "${{ runner.os }}" == "Windows" ]] && [[ -z "${OSTYPE}" ]]; then
            export OSTYPE="msys"
          fi
          
          # Debug: Show environment and available commands
          echo "Environment info:"
          echo "RUNNER_OS: ${RUNNER_OS}"
          echo "runner.os: ${{ runner.os }}"
          echo "OSTYPE: ${OSTYPE}"
          echo "PATH: $PATH"
          echo "PWD: $PWD"
          echo ""
          echo "Available commands:"
          which shellcheck || echo "shellcheck not found"
          which bats || echo "bats not found"
          
          # Run lint with explicit shellcheck path on Windows
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "Running lint with Windows shellcheck..."
            if [[ -f /usr/local/bin/shellcheck.exe ]]; then
              /usr/local/bin/shellcheck.exe -x -e SC1091,SC2155,SC2181 gh-switcher.sh || exit 1
            else
              echo "ERROR: shellcheck.exe not found at /usr/local/bin/shellcheck.exe"
              exit 1
            fi
          else
            npm run lint --if-present || exit 1
          fi
          
          # Run tests - use bats directly on Windows
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "Running tests with Windows bats..."
            if [[ -f /usr/local/bin/bats ]]; then
              /usr/local/bin/bats -r tests || exit 1
            else
              echo "ERROR: bats not found at /usr/local/bin/bats"
              exit 1
            fi
          else
            npm test || exit 1
          fi
          
          # Run build
          npm run build --if-present || exit 1 